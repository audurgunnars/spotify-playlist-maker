{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/Tracklist/Tracklist.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Spotify.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","keyPress","event","keyCode","which","_this","props","triggerSearch","handleTermChange","onType","target","value","_this2","this","react_default","a","createElement","className","input","placeholder","onChange","onKeyPress","onClick","Component","Track","renderAction","isRemoval","triggerTrack","removeTrack","track","addTrack","name","artist","artists","album","Tracklist","tracks","map","Components_Track_Track","key","id","SearchResults","Components_Tracklist_Tracklist","searchResults","Playlist","handleNameChange","onNameChange","playlistName","playlistTracks","onSave","url","concat","accessToken","expiresIn","getUserID","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","response","jsonResponse","wrap","_context","prev","next","fetch","headers","Authorization","sent","ok","json","abrupt","t0","console","log","stop","_x","apply","arguments","createPlaylistID","_ref2","_callee2","userID","playlistResponse","jsonPlaylistResponse","_context2","method","body","JSON","stringify","_x2","_x3","_x4","trackToPlaylist","_ref3","_callee3","playlistID","trackURIs","addSongsToPlaylist","_context3","uris","_x5","_x6","_x7","Spotify","_getAccessToken","searchTerm","currentUrl","window","location","href","match","setTimeout","history","pushState","search","_search","_callee4","_context4","items","_x8","savePlaylist","_savePlaylist","_callee5","_context5","_x9","_x10","App","state","find","savedTrack","setState","toConsumableArray","trackRemoved","filter","trackRemove","updatePlaylistName","trackURI","index","uri","queryString","parse","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","inputValue","Boolean","hostname","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84e9204b.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport './SearchBar.css'\n\nclass SearchBar extends Component {\n  keyPress = event => {\n    const code = event.keyCode || event.which\n    if (code === 13) this.props.triggerSearch()\n  }\n  handleTermChange = event => {\n    this.props.onType(event.target.value)\n  }\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input\n          value={this.props.input}\n          placeholder=\"Enter A Song, Album, or Artist\"\n          onChange={this.handleTermChange}\n          onKeyPress={this.keyPress}\n        />\n        <a onClick={() => this.props.triggerSearch()}>SEARCH</a>\n      </div>\n    )\n  }\n}\n\nexport default SearchBar\n","import React, {Component} from 'react'\nimport './Track.css'\n\nclass Track extends Component {\n  renderAction = () => (this.props.isRemoval ? '-' : '+')\n  triggerTrack = () => {\n    this.props.isRemoval\n      ? this.props.removeTrack(this.props.track)\n      : this.props.addTrack(this.props.track)\n  }\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>\n            {this.props.track.artist || this.props.track.artists[0].name} |{' '}\n            {this.props.track.album.name}\n          </p>\n        </div>\n        <a className=\"Track-action\" onClick={this.triggerTrack}>\n          {this.renderAction()}\n        </a>\n      </div>\n    )\n  }\n}\n\nexport default Track\n","import React, {Component} from 'react'\nimport './Tracklist.css'\nimport Track from '../Track/Track'\n\nclass Tracklist extends Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {this.props.tracks.map(track => {\n          return (\n            <Track\n              key={track.id}\n              track={track}\n              addTrack={this.props.addTrack}\n              isRemoval={this.props.isRemoval}\n              removeTrack={this.props.removeTrack}\n            />\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nexport default Tracklist\n","import React, {Component} from 'react'\nimport './SearchResults.css'\nimport Tracklist from '../Tracklist/Tracklist'\n\nclass SearchResults extends Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <Tracklist\n          tracks={this.props.searchResults}\n          addTrack={this.props.addTrack}\n          isRemoval={false}\n        />\n      </div>\n    )\n  }\n}\n\nexport default SearchResults\n","import React, {Component} from 'react'\nimport './Playlist.css'\nimport Tracklist from '../Tracklist/Tracklist'\n\nclass Playlist extends Component {\n  handleNameChange = event => {\n    this.props.onNameChange(event.target.value)\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input\n          placeholder=\"New Playlist\"\n          id=\"newplaylist\"\n          value={this.props.playlistName}\n          onChange={this.handleNameChange}\n        />\n        <Tracklist\n          tracks={this.props.playlistTracks}\n          addTrack={this.props.addTrack}\n          isRemoval\n          removeTrack={this.props.removeTrack}\n        />\n        <a className=\"Playlist-save\" onClick={this.props.onSave}>\n          SAVE TO SPOTIFY\n        </a>\n      </div>\n    )\n  }\n}\n\nexport default Playlist\n","const clientID = '441668fabc3c41cba1445ae305aaec86'\nconst redirectURI = 'http%3A%2F%2Flocalhost%3A3000%2F'\nconst scope = 'playlist-modify-private playlist-modify-public'\nconst url = `https://accounts.spotify.com/authorize?client_id=${clientID}&redirect_uri=${redirectURI}&response_type=token&scope=${scope}`\nlet accessToken = ''\nlet expiresIn = 0\n\nconst getUserID = async accessToken => {\n  try {\n    const response = await fetch('https://api.spotify.com/v1/me', {\n      headers: {Authorization: `Bearer ${accessToken}`},\n    })\n    if (response.ok) {\n      const jsonResponse = await response.json()\n      return jsonResponse.id\n    }\n  } catch (error) {\n    return console.log(error)\n  }\n}\nconst createPlaylistID = async (userID, accessToken, playlistName) => {\n  try {\n    const playlistResponse = await fetch(\n      `https://api.spotify.com/v1/users/${userID}/playlists`,\n      {\n        headers: {Authorization: `Bearer ${accessToken}`},\n        method: 'POST',\n        body: JSON.stringify({name: playlistName}),\n      }\n    )\n    if (playlistResponse.ok) {\n      const jsonPlaylistResponse = await playlistResponse.json()\n      return jsonPlaylistResponse.id\n    }\n  } catch (error) {\n    console.log(error)\n  }\n}\nconst trackToPlaylist = async (playlistID, accessToken, trackURIs) => {\n  try {\n    const addSongsToPlaylist = await fetch(\n      `https://api.spotify.com/v1/playlists/${playlistID}/tracks`,\n      {\n        headers: {Authorization: `Bearer ${accessToken}`},\n        method: 'POST',\n        body: JSON.stringify({uris: trackURIs}),\n      }\n    )\n    return addSongsToPlaylist\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nconst Spotify = {\n  _getAccessToken: searchTerm => {\n    if (accessToken) return accessToken\n    const currentUrl = window.location.href\n    accessToken = currentUrl.match(/access_token=([^&]*)/)\n    expiresIn = currentUrl.match(/expires_in=([^&]*)/)\n\n    if (accessToken && expiresIn) {\n      accessToken = accessToken[1]\n      expiresIn = +expiresIn[1]\n\n      window.setTimeout(() => (accessToken = ''), expiresIn * 1000)\n      window.history.pushState('Access Token', null, '/')\n      return accessToken\n    }\n    window.location = url + `&state=${searchTerm}`\n  },\n  search: async searchTerm => {\n    const accessToken = Spotify._getAccessToken(searchTerm)\n    try {\n      const response = await fetch(\n        `https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        }\n      )\n      const jsonResponse = await response.json()\n      return jsonResponse.tracks.items\n    } catch (error) {\n      console.log(error)\n      return []\n    }\n  },\n  savePlaylist: async (playlistName, trackURIs) => {\n    const accessToken = Spotify._getAccessToken()\n    const userID = await getUserID(accessToken)\n    const playlistID = await createPlaylistID(userID, accessToken, playlistName)\n    await trackToPlaylist(playlistID, accessToken, trackURIs)\n  },\n}\n\nexport default Spotify\n","import React, {Component} from 'react'\nimport queryString from 'query-string'\n\nimport './App.css'\nimport SearchBar from '../SearchBar/SearchBar'\nimport SearchResults from '../SearchResults/SearchResults'\nimport Playlist from '../Playlist/Playlist'\nimport Spotify from '../../util/Spotify'\n\nclass App extends Component {\n  state = {\n    searchResults: [],\n    playlistName: '',\n    playlistTracks: [],\n    searchTerm: '',\n  }\n  componentDidMount() {\n    const currentUrl = window.location.href\n    const parsed = queryString.parse(currentUrl)\n    const searchTerm = parsed.state\n    if (!searchTerm) return\n    this.setState({searchTerm})\n    this.triggerSearch(searchTerm)\n  }\n\n  addTrack = track => {\n    if (\n      this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)\n    ) {\n      return\n    }\n    this.setState({playlistTracks: [...this.state.playlistTracks, track]})\n  }\n  removeTrack = track => {\n    const trackRemoved = this.state.playlistTracks.filter(\n      trackRemove => track.id !== trackRemove.id\n    )\n    this.setState({playlistTracks: trackRemoved})\n  }\n  updatePlaylistName = name => {\n    this.setState({playlistName: name})\n  }\n  savePlaylist = () => {\n    const trackURIs = this.state.playlistTracks.map(\n      (trackURI, index) => (trackURI = this.state.playlistTracks[index].uri)\n    )\n    Spotify.savePlaylist(this.state.playlistName, trackURIs)\n    this.setState({playlistName: 'New Playlist'})\n    this.setState({playlistTracks: []})\n  }\n  search = searchTerm => {\n    this.setState({searchTerm})\n  }\n  triggerSearch = async searchTerm => {\n    const searchResults = await Spotify.search(searchTerm || this.state.searchTerm)\n    this.setState({searchResults})\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onType={this.search} triggerSearch={this.triggerSearch} input={this.state.searchTerm} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              addTrack={this.addTrack}\n            />\n            <Playlist\n              inputValue={this.state.playlistName}\n              onNameChange={this.updatePlaylistName}\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              addTrack={this.addTrack}\n              removeTrack={this.removeTrack}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './Components/App/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}